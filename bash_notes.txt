send email from command line: MSMPT
    https://code.google.com/p/google-gadgets-for-linux/wiki/MSMPTQuickStart
    https://wiki.archlinux.org/index.php/msmtp

http://matt.might.net/articles/bash-by-example/

http://en.wikipedia.org/wiki/Bash_(Unix_shell)#Keyboard_shortcuts

Ctrl-] x            move the cursor forward to the next occurance of x
Alt-Ctrl-] x        move the cursor backwards to the previous occurance of x
Ctrl-_
Ctrl-x Ctrl-u       Undo the last changes
Alt-r               Undo all changes to the line.

grep recursive glob filter for bash 3.x:
    grep -r --include=*.js foo .

grep recursive glob filter for bash 4+ with:
    shopt -s globstar
    grep -RHsn 'string' **/*.ext

    -H      Always print filename headers with output lines.
    -s      Nonexistent and unreadable files are ignored.
    -n      Each output line is preceded by its line number relative to the file

conditionals
    Whitespace in conditional brackets is *required*.
        This will cause an error:
            ["$TERM" = ""] || echo ok
        This is correct:
            [ "$TERM" = "" ] || echo ok

    Whitespace also affects grouped {} commands.  http://www.gnu.org/software/bash/manual/bashref.html#Command-Grouping
    Best practice:
        - always inner-pad [ ... ] ( ... ) { ... } with whitespace.
        - always terminate groups ( ...; ) { ...; } with semicolon.

subshells and pipelines  http://stackoverflow.com/a/2188223/152142
    In a pipeline, all commands run concurrently (with their stdout/stdin connected by pipes)
    in different processes.

    Parentheses ( ...; ) create a _subshell_ with its own temporary environment
    and scope.

    Braces { ...; } _group_ commands in the _current_ shell context. If that
    group is part of a pipeline, it runs in a separate process, like any other
    pipeline segment (http://unix.stackexchange.com/a/127346/14626).

    Examples:
        # concatenate 'date' and 'top'
        { date; top -b -n1 | head ; } > logfile

        # timestamp a build log
        { date; make 2>&1; date; } | tee logfile

process substitution
command substitution


    When you connect to processes in a pipe such as ...
 
        a | b
 
    you connect stdout (fd #1) of a to stdin (fd #0) of b. Technically,
    the shell process will create a pipe, which is two filedescriptors connected
    back to back. It then will fork two times (create two copies of itself)
    where it replaces standard output (filedescriptor 1) of the first copy by
    one end of the pipe and replaces standard input (filedescriptor 0) of the
    second copy by the other end of the pipe. Then the first copy will replace
    itself (exec) by a, the second copy will replace itself (exec) by b.
    Everything that a writes to stdout will appear on stdin of b.

    But nothing prevents the shell from replacing any other filedescriptor by
    pipes. And when you create a subprocess by writing
        <(c)
    in your commandline, it's just one additional fork for the shell, and one
    additional filedescriptor pair to be created. One side, as in the simple
    case, will replace stdin (fd #0) of "c"... and because the input side of
    this pipe doesn't have a predefined output of "a" (stdout is already taken
    by "|b") the shell will somehow have to tell "a" what filedescriptor the
    pipe uses. Under Linux one can refer to opened filedescriptors as
    "/dev/fd/<FDNUM>" (symlink to /proc/self/fd/<FDNUM> which itself is
    a symlik to /proc/<PID>/fd/<FDNUM>), so that's what's replaced as a "name"
    to refer to the substituted process on "a"'s command line:

    Try this:
 
        $ echo $$
        12345  # <--- PID of your shell
        $ tee >( sort ) >( sort ) >( sort ) otherfile | sort
 
    and in a second terminal:
 
        $ pstree 12345 # <--- PID of your shell
        zsh,301
          ├─sort,3600 # <-- this one reads from the other end of the shell's fd #14
          ├─sort,3601 # <-- this one reads from the other end of the shell's fd #15
          ├─sort,3602 # <-- this one reads from the other end of the shell's fd #15
          ├─sort,3604 # <-- this one reads from stdout of tee
          └─tee,3603 /proc/self/fd/14 /proc/self/fd/15 /proc/self/fd/16 otherfile
 
    If your system doesn't support the convenient /proc/self/fd/<NUM>
    shortcut, the shell might decide not to create a pipe, but rather create
    temporary fifos in /tmp and use those to connect the filedescriptors.

    You can watch the syscalls as they are made:
        $ strace -fe fork,pipe,close,dup,dup2,execve bash -c 'tee <(sort) <(sort)'

pipe as input stream to a command (e.g., vim)
        vim -Nu <(echo 'set rtp+=~/.vim/bundle/neocomplete.vim/')
    for multiline stream, cat a heredoc:
        vim -Nu <(cat << EOF
        set runtimepath+=~/.vim/bundle/neocomplete.vim/
        let g:neocomplete#enable_at_startup = 1
        EOF)

"command" command
    Execute command, ignoring any function "shadow". (like `normal!` in Vim)

BEST PRACTICES / LINT
    shellcheck is amazing
        https://github.com/koalaman/shellcheck

    http://www.etalabs.net/sh_tricks.html
        printf %s\\n "$var"
            - use `printf` instead of `echo`
            - see also: https://github.com/koalaman/shellcheck/issues/274

        IFS= read -r var
            - reads a line of input, terminated by a newline or EOF or error
              condition, from stdin and stores the result in var.

TOOLS:
    iftop
    iotop
    lsof "replaces ps and netstat"  http://danielmiessler.com/study/lsof/
        lsof -c tmux        see what files and network connections tmux is using
        losf /var/log/*     see everything that is interacting with /var/log/*

FAQ:
    you don't need to protect the end-of-line with a backslash if:
        - the line ends with the pipe symbol
        - you are in an unclosed string
    return value of `local` assignment:
        `local foo=$(...); echo $?` always returns zero!
            http://unix.stackexchange.com/a/146900/14626
        workaround: always declare the `local` var first:
            local foo
            foo=$(...)
            echo $?

    var=$(dirname "$f")
            http://www.etalabs.net/sh_tricks.html
        Because most commands writing a newline at the end of their output,
        Bourne-style command substitution was designed to strip _all_ trailing
        newlines from the output. In the above command, if f contains any
        trailing newlines in the last directory component, they will be
        stripped, yielding a different directory name.

ssh
    To disconnect a client from a hung host:
        <Enter>~.
