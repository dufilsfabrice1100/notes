

# Token-basierte Authentifizierung. 

## Stand der Technick : Cookies 


* basierte auf signed token

## Vorteil token-basierte Authentifizierung
ref : https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/

* Cross-domain / CORS 

* Stateless ( Server side scalability ) : there is no need to keep a session
  store, the token is a self-contained entity that conveys all the user
  information. The rest of the state lives in cookies or local storage
  on the client side. 

* CDN: you can serve all the assets of your app from a CDN (e.g. 
  javascript, HTML, images, etc.), and your server side is just the API.


* Decoupling: you are not tied to a particular authentication scheme.
  The token might be generated anywhere, hence your API can be called 
  from anywhere with a single way of authenticating those calls.


* Mobile ready: when you start working on a native platform (iOS, Android, 
  Windows 8, etc.) cookies are not ideal when consuming a 
  secure API (you have to deal with cookie containers). Adopting a 
  token-based approach simplifies this a lot.


* CSRF: since you are not relying on cookies, you don't need to protect 
  against cross site requests (e.g. it would not be possible to <iframe> 
  your site, generate a POST request and re-use the existing authentication 
  cookie because there will be none).


* Standard-based: your API could accepts a standard JSON Web Token (JWT). 
  This is a standard and there are multiple backend libraries (.NET, Ruby, 
  Java, Python, PHP) and companies backing their infrastructure (e.g. Firebase, 
  Google, Microsoft). As an example, Firebase allows their customers to use any 
  authentication mechanism, as long as you generate a JWT with certain pre-defined 
  properties, and signed with the shared secret to call their API.
  
