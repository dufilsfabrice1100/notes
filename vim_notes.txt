VIM NOTES
==================
good:
    http://vimcasts.org/
    http://glts.github.io/2013/04/28/vim-normal-mode-grammar
    FAQ! http://vimhelp.appspot.com/vim_faq.txt.html
    Zintz tutorial: http://dahu.github.io/vim_waz_ere/

plugins:
    ctags.sourceforge.net 
        export PATH="/usr/local/bin:$PATH"

READ results into cursor position (acme!) - http://stackoverflow.com/a/2960630 
                                            http://superuser.com/a/251959/114842
    :r!foo                  read in stdout from a shell command
    <c-r>=system('foo')
    :r [file]               read in contents of [file]
    <c-r>=&vim_variable     hint: works with tab-complete (wildmenu)
    <c-r>=SomeFunction()
    <c-r>[register_name]    % # : .

WRITE buffer to external process
    :w !bash                send buffer contents to bash
                            TODO: doesn't work with unsaved contents

FILTER buffer contents through shell command (acme!) - http://stackoverflow.com/a/790218/152142
    In normal mode, ! is an operator (action) like y/d/c. You can do: 
        !!
        {range}!!
        !{motion}{shell cmd} (e.g. !Gls<cr>)
    Instead of :.!date write "date" in a buffer, then (in normal mode): 
        !!bash<cr>

    :{range}! filters a range of lines through a command and replaces those 
    lines with the output.

    examples (normal mode):
        :%!             filters the whole buffer
        !{space}{cmd}   replace the current line with <cmd> stdout
        !{space}sh      run the current line as a shell command
        !Gsort          equivalent to :.,$!sort

REDIRECT messages (all output from all vim commands)
    :redir >> [file]
    :redir @x          redirect to register 'x'
    :redir END
    :let @x = system('ls')  store shell command output to register x

    example: write output from :changes to register 'x'
        :set nomore | redir @x | changes | redir END | set more
    then read into another buffer:
        <c-r>=@x

REGISTERS: http://stackoverflow.com/a/3997110/152142
    "=          expression register
                eg: "=command_or_&variable<cr>p
    ""          unnamed register (always gets written-to)
    ".          the last inserted text
    "_          blackhole register
    "0          contains the last yank
    "1-"9       contain the last 9 deletions
    y"x         yank line to register x
    yy"X        *append* line to register x

    example: replace word with last-yanked text
        ciw<C-r>0

    example (acme!): increment register x and insert its value
        let @x=@x+1 | exe 'norm i' . @x

fundamental:
    capitalizing (shift) performs the "inverse" of the command
    .             repeat the previous command
    :5,42[cmd]    prepend a range to any command
                  range can be defined by a search:
                    :/^start of test/+1,/^end of test/-1w! Xtest.c

modifiers:
    *,#  search "whole word" under cursor
    f    forward
    t    til

special buffers:
    q:
    q/

motion:
    + (aka <cr> or <c-m>) and - are actually useful (remap - to <c-cr>). To get
    similar behavior at the end of the line, use $ to move to the EOL, then j/k
    will "stick" to the end of the line.

search
    ';' is a special offset to "chain" searches. Example:
        ab/;/cd     search for "cd" after the next "ab"
    :%s/foo//gn     count matches of "foo"

vim regex features:
    \%# \%c \%l     cursor/column/line position
    \|              branch (OR)
    \&              branch concat: matches _only_ if the preceding branch(es) match at the _same_ position
                    example: "foo\&...bar" matches "foobar" but not "fooobar"
    \zs \ze
    .{-}            lazy (non-greedy) match. compare: .*
    \n              can be used anywhere in a pattern (for buffer contents
                    only; behaves different in string matcher)

substitute (search/replace):
  almost any character (following s) can be used as the delimiter:
    :%s/before/after/g
    :%s@before@after@g
  e-option:
    :%s/foo/bar/ge
                 ^--ignore errors

multi-repeat / global apply:
    http://vim.wikia.com/wiki/Power_of_g

    :[range]g/{pattern}/[cmd]    apply cmd to lines matching {pattern}
    :[range]g!/{pattern}/[cmd]   inversion (apply to lines NOT matching)

    examples:
        print all matches of /re/:   http://stackoverflow.com/a/509720/152142
            :g/re/p
        ...with line numbers:
            :g/re/#
        change (substitute) foo to bar only on #comment lines:
            :g/^\s*#/s/foo/bar/g
        delete lines that match foo:
            :g/foo/d_
            :g/foo/normal dd
        append all lines matching foo to @a ("qaq" clears @a):
            qaq:g/foo/y A
            qaq:g/foo/normal "Ayy
        execute any command(s) for each line of a match:
            :g/foo/cmd | cmd | cmd
        append the result of col('.') to lines 265-292:
            265,292s/$/\=col('.')/
                        ^- \= is evaluated for each line

rubydo, pydo, perldo, luado, ...
    reverse lines 1-5
        :1,5luado return line:reverse()
    prepend each line with its length
        :pydo return str(len(line)) + line
    reverse WORDs on current line
        :.perldo $_ = join ' ', reverse split
    insert a random string of 8 characters (A-Z) at the end of every line
        :rubydo $_ += ' ' + (1..8).collect{('A'..'Z').to_a[rand 26]}.join

macros (complex-repeat):
    qx  start recording in register x 
    q   stop recording
    @x  execute the text in register x 
        example (acme!): yank any text, then execute with @"
    @@  replay the most recent macro
    @:  repeat the last command!

window management:
    ctrl-w-[v s o]
    ctrl-w-[c h j k l]
    ctrl-w-[= | _]
    zN<enter>               resize vim height to N (useful for...?)

buffer hopping:
    ctrl-^ :ls

file management (netrw):
    :E     browse directory of current buffer (_not_ the :pwd directory)
    :Vex   browse directory of current buffer in a new split window

OPEN file/uri:
    gx              open url 
    [ctrl-w]gf      open file [in new window]

MOVE through text:
    gg G 0 $ f t ; % 
    ]} ]] ) } 
    e E ge gE    move to end of word
    w W          move to next word
    [count]%     move to [count] percentage in the file

MOVE through changes and jumps:
    g; g,           jump up/down the changes stack
    gi              enter insert-mode at the location of the last insert
    `.              jump to the very last change *in the buffer*
    ctrl-o ctrl-i   jump up/down the jumps stack
    ``              jump to the last jump *in the buffer*

undo:
    :earlier 5m
    :later 30s
    :earlier 1f     go to the last saved state
    :later 1f       go to the newest buffer state

editing:
    i I a A o O J
    c[iaft]["({]
    c/foo 
    ~             toggle case
    ctrl-n        autocomplete WORD
    ctrl-x-l      autocomplete LINE
    ctrl-x-f      autocomplete file path
    ctrl-x-o      OMNIcomplete 

indentation:
    > <      indent
    ==       fix indent

indentation, (insert mode):
    ctrl-t ctrl-d

visual/selection:
    vib vab         b = parentheses block
    viB vi{ vaB     B = brace block
    vababab         repeat to expand selection
    vi}i}i}
    gv              reselect last selection
    gn              select next match (text object, can be composed!)
                    example: /foo<cr>cgnqux<esc>..
                        foo bar      qux bar
                        baz foo  =>  baz qux
                        foobl a      quxbl a
    o               jump to other end of visual selection

COMMAND mode:
    ctrl-d      show table of command (and file/dir/path!) suggestions

buffer info:
    ctrl-g      show file path in status
    g-ctrl-g    show word count, etc

viml / vimscript / plugin development:   http://stevelosh.com/blog/2011/09/writing-vim-plugins/
    normal!     like normal, but ignores mappings the user has set up

debugging vim
    :scriptnames
    :verbose set foo
    :verbose map %
    :set verbose=9      debug autocommands

WHAT I LEARNED FROM GITHUB
==========================
AFFIRMATIONS of common project management wisdom:
    - it is often better to let a request sit for a while (weeks, months)
      because users change their minds, or other developments in the project
      obviate the feature request.

NEW USER NOTES
==============
:preserve saves new files, even files without a name. Try :recover on a :new
file, you might be surprised.

:find foo<tab> (with path^=**) is a lot more useful than you think!

vim is a concept
    - modal editing, atomic edits, edit grammar
    - can be implemented in any editor/IDE
vim is a component
    - can be embedded in other applications/IDEs
vim is _not_ a platform (unlike emacs)
vim vs emacs:
    - worse is better?
        1 VimL is more accessible than elisp, for the 80% of programmers who are only comfortable with
          a conventional non-lisp language.
        2 vim is a DSL for editing text. it turns out that most users--most _power_ users--
          do not care about infinite extensibility. What matters for an editor is:
            - it fills the gap between shell scripts (or a 4GL for those who don't know scripting)
              and copy-paste. Macros + vim-regex + ex commands + text-objects + composable & repeatable
              operations fill that gap better than anything else so far.
              - one-liners like :g/r/e/<cmd> are a major component of that DSL.
                elisp (general-purpose language) isn't conducive to one-liners.
            - makes simple things easy and difficult things can be shelled out to external tools (unix way)
                - rewrite the universe in elisp is not a good tradeoff just to get extensibility,
                  because most users just want STDOUT & STDIN.
            - the DSL should be "optimized for usage, not programming" <= http://yosefk.com/blog/i-cant-believe-im-praising-tcl.html
                - "commands, not expressions"
                - "flat function calls with literal arguments is what interactive program usage is all about"
                - "Short code matters a lot; short interactive commands matter much more"
                    - i.e., ex-commands!
        - I truly love the emacs model and elegance, and I had high hopes for Light Table.
            Now I believe the real progress will come from something like atom talking
            to an nvim server. nvim + extensible core (written in a popular language)
            + webkit engine. And of course, nvim for terminal setups.
                - evil-mode is superb, and I use it happily, but configuring it
                  _and_ configuring emacs besides will harm adoption. See [1] and [2] for why users won't move to emacs for evil-mode.
                  vim refugees who stick with emacs tend to give up on evil-mode: https://www.reddit.com/r/emacs/comments/2w8qk8/venturing_out_of_evil_mode/
    - convention over configuration (relatively...)
    - smaller surface area
    - backwards compatibility:
        - emacs plugins embrace the bleeding edge and commonly require latest emacs.
        - vim reluctance to add features means plugins must find workarounds,
          which means they will be backwards-compatible.
      work only with 24.3 or even 24.4, which is the bleeding edge.
      Most Vim plugins support 7.2.
    - emacs is "not in the business of competing": http://www.reddit.com/r/emacs/comments/2bho80/emacs_maintainer_were_not_in_the_business_of/cj5lr7d
    - vim is a "disposable" environment: spin one (or 20) up, do some work, shut it down.
        - drop session files anywhere to resume later.
        - fast startup is highly valued.
        - communicate with other instances (nvim msgpack, --remote)
        - similar to VMs, containers (docker), etc.
        - unlike emacs, which encourages a long-running instance.
why vim?
    The big players are distracted by real problems, like compiler performance,
    debugging, and enterprise support. For this reason there will always be
    a niche for "long tail" projects like vim, which focus on a niche
    "problem": the space between ideation and implementation called "editing".
    Brooks would say that editing is not an essential complexity. The gains to be had
    from optimizing have an upper limit. (Have we reached it? I think with
    extensible text objects, we may be close. Then it will be a solved problem,
    and that's a good thing.) It turns out, though, that the "trivial
    inconveniences" of a workday add up quite a lot, and moreover are
    multiplied by the cost of a context-switch. When your regex skills are still
    weak after 10 years of developing, doing ad-hoc inspection of logs, errors,
    xml feeds, json responses, HTTP requests, (or looking for yet another
    special-purpose tool)... that slows you down and it interrupts your flow.
      So Vim and other niche editors have a job: (as a vocal contributor to
      Nvim, I consider it my job to make sure Nvim is _cognizant_ of this job,
      for perhaps the first time in editor history) piggyback on the big
      players, be a _passive_ beneficiary of their space-age plasma thrusters,
      like a courier (Y.T., Snowcrash) hitched to a semi, or a bug on an F16.
      Atom, Visual Studio, eclipse are big fish with a lot of energy; surf that
      energy instead of trying to reinvent it. Sun Tzu has a pithy parable for
      this. Rich Hickey would call this _leverage_. Get a lot for a little.
      Focus on the part that is actually unique to your tool. N/Vim can crank
      this up to 11 if we consciously acknowledge that this is the direction we
      want to go. Emacs community doesn't quite get
      this; although emacs is certainly interoperable with external tools, there
      is a culture of it, it's not the _default_ mode of operation, so you end
      up having to cobble together the conventions you expect from Vim
      (quickfix, makeprg, formatprg, ...). This means you don't benefit from
      network effects and others don't benefit from the little garden you have
      dug.

why was / chosen for the "search" operation?
    - / shares the same key as ? which is a reasonable mnemonic for "search".
        - but why should arbitrary key placement on the US layout determine the 
          mnemonics for a text manipulation DSL?
            - precisely because it is arbitrary, and in the end most keyboards
              can switch to US layout as needed. For the same reason that greek letters are 
              used as shorthand for a quantity-manipulation DSL--math--but the vastly
              most important function of this shorthand is to increase the density (throughput)
              and reduce friction of absorption (because remember, time complexity
              is lower-bounded by space complexity); and mnemonic is a minor incidental
              benefit that was most accessible to the originator and only helpful to the
              most curious of students today (eg, how many realize that sigma is a mnemonic
              for [S]um?). But for latin-based cultures, the mnemonics of the vim
              commands are there for the curious, as the mnemonics of greek are for 
              curious math students. The mnemonics are less intuitive for asian
              users, but the primary important result is that we have a dense
              language for text manipulation represented by economical symbols.
              From there we can move on to using the language, which is where
              the real value exists. Also from there, we can _extend_ the 
              language using the existing patterns. For example, / means search
              and g is the main "auxliary namespace" for vim commands, so g/
              can be used to prefix a namespace of advanced search functions.

scoping (local variables): 
    let g:foo = 'qux'
    let foo = 'bar'
        - does _not_ overwrite g:foo
        - cannot overwrite v:foo
        - echo g:foo => 'qux'
        - echo foo => 'bar'
    l: is almost never needed, because:
        - 'let foo' will not modify the environment _outside_ of the local function scope

don't bother with cream
don't get windows build from vim.org

always use '' (not "") for regex strings

the primary value of vim is:
    - composition of commands
        - vim is command-oriented: searchable, malleable command history.
        - ex-command DSL for ad-hoc text mainpulation (no equiv. in emacs?)
    - repeatable
        text editing is an accidental task. in the future we might be editing ASTs, not text.
        see vim-sexp and evil+smartparen to see how the vim model applies beyond dumb text.
        (lambdu, MPS)
    - macros (record the literal keystrokes--also has a cost)
    - when you are able to efficiently navigate and manipulate arbitrary text:
        - special-purpose UIs are not necessary (or even, counterproductive)
        - reuse of the "buffer" concept allows new data/document types to be
          navigated with very little investment, yet a lot of leverage.
        - data may be annotated with "syntax" definitions and the same tools
          (motions, text objects, syntax objects, plugins) can operate as
          always; very powerful.
    - working with commands instead of blocks of (elisp) code:
        - command history is a primary tool: modifying command history as
          a buffer is key part of workflow.
        - cf. scratch buffer in emacs
        - visually scanning the command history, greater density

vim's "current directory" applies to the entire vim session (the current 
running instance of Vim), regardless of what file (buffer) you are 
currently using. Think of it as your "working directory" for the current 
vim session. 

lockvar: what does it do? is there a performance benefit? (no)

mbyte: "mbyte" in practice may be read as "UTF-8".
    https://github.com/neovim/neovim/issues/68#issuecomment-39664151
    https://github.com/neovim/neovim/pull/1130#issuecomment-54032535
        - &encoding is usually set once and forever. It does not have anything
          to do with a buffer's read (e ++enc=..., &fileencodings), write
          (&fileencoding), or terminal encodings.
        - &encoding is the *internal representation* of a Vim string. All text
          Vim works with is *always* treated with this encoding. When a buffer
          is read it is converted to &encoding (&encoding is *not*
          buffer-local).
    emacs uses similar terms:  http://nullprogram.com/blog/2014/06/13/
        There are three ways to quantify multibyte text:
            length: number of characters, including combining characters
            bytes:  number of bytes in its UTF-8 encoding
            width:  number of columns it would occupy in the current buffer

:make and &makeprg are for processing the current buffer through *any* program.
The name "make" is just a historical misnomer.

"quickfix" is a historical misnomer and it is perfectly acceptable to use
this buffer for any list of annotations received from :make.

Vim refers to text documents as *buffers*. Get used to that. This is a useful
distinction, not just pedantic, because: a new file, which is not saved 
yet, doesn't have a path on the filesystem yet: it may exist only in Vim. Vim 
also has special buffers like the "quick fix" window and the "preview" window.

Vim *in the terminal* is somewhat[1] at the mercy of the terminal. Using Vim in the 
terminal makes it obvious the distinctions that perhaps were not so 
important before you started using a text editor in the terminal. Before, 
the distinction between "shell" and "terminal emulator" may have seemed
like noise. But once you start using vim on different systems, the 
quirks of the various terminal and shell implementations are brought into
relief. A terminal sends characters to the shell. Vim, in the context of 
a terminal, accepts the characters sent to it. When you enter ALT-f in
terminal Vim, one terminal may send <foo>f to Vim, another <bar>f.
The state of the terminal in this decade might seem rather frustrating, 
but c'est la vie. Powershell is the only really innovative, 
widely-deployed alternative, and while it's to be commended, it doesn't 
have a terminal-resident editor (and it's terminal is cmd.exe). So if 
using terminal-vim as your *primary* editor is too much trouble, 
just use gvim and forget about it. But that's where we are. VT-100 legacy 
is sitting on top of a massive, massive pile of tools and powershell 
isn't positioned to address.
    discussion to improve Vim terminal behavior: http://stackoverflow.com/a/14642074/152142
    [1] https://github.com/neovim/neovim/issues/176#issuecomment-37070131

    great explication of legacy terminal key code handling:
        https://github.com/neovim/neovim/issues/176#issuecomment-38017737
        http://stackoverflow.com/a/4728904/152142

    http://vim.wikia.com/wiki/Mapping_fast_keycodes_in_terminal_Vim
        There are two types of keycodes: terminal keycodes and Vim keycodes. Terminal keycodes look something like
            ^[[1;2A
            These are actual bytes that are sent to Vim by the terminal when we type Shift-Up, for example (on an xterm).
        Vim keycodes look like
            <S-Up>
        Vim needs its own representation of keycodes because it runs on a variety of platforms.
        Vim can act upon its own keycodes, and leave the assignment of terminal keycodes to
        autodetection or to manual setup by the user.

    terminal on Windows: https://groups.google.com/forum/#!msg/libuv/EhwAn3y9wWo/T-yyLvVmIrYJ
        "The ability to automate interactive programs using libuv would be a killer feature,
        libuv could be used as a replacement for libexpect and node.js a replacement for expect"

    NOTE(jkeyes): emacs calls these two concepts "function keys" and "control keys".
        http://stackoverflow.com/a/917031/152142

    'unconed' (author of TermKit) comment:
        Unix magic like nested remote subshells and remote privilege escalation
        works only by accident, because the programs in between are too dumb to
        mess it up, not because of anything deliberate. Today, this means you
        still have to abort SSH sessions by typing magic sequences (return,
        tilde, period) rather than using out of band signalling, and catting
        binary files into your terminal can mess it up permanently.

sed becomes second nature as a side-effect of normal, prolific Vim usage.
Searching for ^\s.+ becomes an actually desirable thing to reach for, 
because then you can `cgn` the matches. Regex (even if quirky) becomes 
an actually desirable tool. Removing ambiguitiy from a text search 
(example: "find all lines that look like variable assignment and start with a dollar sign"),
instead of "don't bother", becomes a low-friction "yes, of course".
I had no desire to learn sed, because I always thought "I'll 
just reach for python or ruby or whatever". And yes, you can do that 
in vim too (:py :ruby :lua).

Why is <c-u> peppered all over mappings?
    Besides the obvious range that is inserted with : in visual-mode,
    a range is also inserted if you prepend : with a [count].
    This causes unwanted side effects (:h :func-range)
        Vim will call the function {range} times
        the cursor is moved to the start the line, even with a range of 1.
    A function marked with 'range' is sent magic parameters *a:firstline* *a:lastline*

wtf is noremap?
    non-recursive map

what is the difference between ttimeout and ttimeoutlen?
    " in the words of Steve Losh, "Basically this makes terminal Vim work sanely."
    "   https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc#cl-95
    ""
    " see also "terminal" section above
    set ttimeout
    set ttimeoutlen=100 "this is for keycodes
    set timeout
    set timeoutlen=3000 "this is for mappings

marks seems useless?
    - more useful if they appear in the signs column
    - don't conserve them. use them, abuse them!
        - put them on maps like ':nnoremap / ms/'

[count] seems useless
    - don't try to be exact. If you know a target is in the same column, say,
      about 10 lines away, just mash 8j.

leader key? => leader key is for throwaway mappings.
    - merging a bunch of files opened at the command line? ':nmap ,d ]agg]nd]ndd]n'
    - record a macro in @q and then store it in a map:
        nmap ,l <c-r><c-r>q

vnoremap, noremap, xnoremap. Q: Why care about selection-mode? A: For snippets plugins.

g@ is to create an operator (like 'd'), _not_ an operand (like 'w' or a custom
motion). To "create" an operand, simply omap to a function that check v:operator.

omnifunc is _not_ the same thing as completefunc: https://github.com/guns/vim-clojure-static/blob/8bed65c3f42aaf4d906aaca93d223f62a53542ce/ftplugin/clojure.vim#L34
    completefunc: User defined completion       :h compl-function
    omnifunc:     filetype-specific completion  :h compl-omni

syntax plugin, ftplugin:
    http://www.reddit.com/r/vim/comments/2fdys2/question_custom_highlighting_in_vim/ck8dpxf

runtimepath is like bash $PATH. The order matters. Any VimL file in a plugin/
directory anywhere in your runtime path _is_ a plugin. You can force plugins
to run via ':runtime! foo.vim'

<Plug> mapping is just a "virtual key sequence" that can be mapped-to.
<Plug>(Foo) convention prevents timeoutlen pause caused by overlapping maps.
    http://stackoverflow.com/a/13698530/152142

.gvimrc runs after .vimrc, and exists only to disable annoying gvim defaults.

harmony with shell:
    vim -Nu <(echo 'echom "hi" | call append(1, "foo")')

http://learnvimscriptthehardway.stevelosh.com/
    - gave vim a high-quality, accessible, attractive go-to tutorial
    - now we just need a better brand at vim.org

inclusive vs exclusive (:help inclusive)
    Vim makes a distinction between _inclusive_ and _exclusive_ motion.
    v toggles the "inclusiveness" or "exclusiveness" of a motion.
    Examples:
        dvb     inclusive `b`
        dve     exclusive `e`

how do I "zoom" a window temporarily without messing up the existing window layout?
    :tab split

:find only opens the first file matching a glob expression. How can I open
_all_ files matching a glob?
    :args {glob}

what if i SSH into a machine? will it still show unicode chars correctly?
    Display of characters is up to the _final_ device. Incidentally, this is
    still reflected in the name "terminal": it's the end-user device. Even if
    you're tunneled to a unix machine without X, as long as the remote process
    sends back the correct terminal sequences, your terminal can display them.
    (Note that Vim cares a lot about what $TERM you declare, whereas Nvim tends
    to assume you're running a modern terminal of some sort.)

when is ' mark useful instead of ` mark?
    When you want linewise motion instead of characterwise.
    Example:
            1: 111[cursor]222
            2: 333[mark `]444
        To delete the *entire* lines 1-2: d''

PERFORMANCE FAQ
============
    - if 'listchars' contains characteres not available in your font, your OS
      may go on an extensive (slow) search to get the glyphs from other fonts!
    - keyboard repeat rate may affect perception:
      http://danmarner.com/2014/05/02/One-Weird-Trick-To-Make-Vim-Go-Faster-On-Your-Mac.html

UNIQUE(?) FEATURES
==========================================
persistent undo
undo tree / :earlier / :later
    - emacs undotree is broken. yes, really: http://comments.gmane.org/gmane.emacs.vim-emulation/2079
folding (not in emacs): fine-grained control over folding (e.g., create an arbitrary motion-defined fold on-the-fly with zf{motion})

list sources https://github.com/neovim/neovim/issues/660
    Helm is like unite.vim. The idea of a unified interface for searching lists is
    really one of the next pillars of fundamental UIs (like copy & paste, files &
    directories, and URLs). Emacs and Vim provide something really unique here
    that isn't found in many other places:
        - ability to search lists using a bag of algorithms
        - ability to *sanely* define new sources (like [this](https://github.com/wellle/tmux-complete.vim/blob/master/autoload/unite/sources/tmuxcomplete.vim))
        - ability to extend and define new actions on list items
    Lists are everywhere; intelligent, effortless search should be available for every
    kind of list source you feel like you need. 

    http://www.reddit.com/r/vim/comments/2coqzs/how_do_you_work_with_vim/cji6wuu
        Helm is a completion and narrowing framework. It provides an interface that
        allow multi-step and out-of-order searching. For example, if I
        want to search for list-package, "lis pac" or "pa ^li" will match.

